<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
  <title>Movia</title>
</head>

<body>
  <%# Algorithm:
if user has not rated any movies
    display message asking user to rate some movies
else
    for each movie in the database
        initialize movieSimilarity to 0
        for each movie the user has rated
            calculate genreSimilarityScore using jacardSimilarity
            calculate castSimilarityScore using jacardSimilarity
            calculate directorSimilarityScore using jacardSimilarity
            add weighted sum of similarity scores to movieSimilarity
        add movie's rating to movieSimilarity
        add movie and movieSimilarity to recommendedMovies
    sort recommendedMovies in descending order of similarity
    filter out movies the user has already rated
    display top 10 recommendedMovies on the page
end if
   %>
  <%- include('./../templates/navbar.ejs', {loginDisplay:"block", signupDisplay:"block", }) %>
  <%
    // jacard similarity
    function jacardSimilarity(set1, set2) {
        let intersection = 0
        let union = 0
        for (let i = 0; i < set1.length; i++) {
            if (set2.includes(set1[i])) {
                intersection++
            }
        }
        union = set1.length + set2.length - intersection
        return intersection / union
    }

    function jacardSimilarity2(set1, set2) { // For testing purpose only, Found that both give almost the same result, but since the previous is standard, we will be using that only. 
        let intersection = 0
        let union = 0
        for (let i = 0; i < set1.length; i++) {
            if (set2.includes(set1[i])) {
                intersection++
            }
        }
        union = set1.length + set2.length - intersection
        return intersection / Math.max(set1.length, set2.length)
    }
   %>
  <%

  if (!myratings[user.email]) {
    %>
  <div class="alert alert-info text-center" role="alert">
    First Rate some movies.
  </div>
  <% } else { %>
  <%
  var genre = ['action',
 'adventure',
 'animation',
 'biography',
 'comedy',
 'crime',
 'drama',
 'family',
 'fantasy',
 'film-noir',
 'history',
 'horror',
 'music',
 'musical',
 'mystery',
 'reality-tv',
 'romance',
 'sci-fi',
 'short',
 'sport',
 'thriller',
 'war',
 'western']
//  calculate number of rated movies for each genre:
var genreCount = {}
for (let i = 0; i < genre.length; i++) {
    genreCount[genre[i]] = 0
}
for (let i = 0; i < myratings[user.email].length; i++) {
    for (let j = 0; j < myratings[user.email][i].movie.genre.length; j++) {
        genreCount[myratings[user.email][i].movie.genre[j].toLowerCase()]++
    }
}
console.log(genreCount)
    recommendedMovies = []
    for (let i = 0; i < movies.length; i++) {
        movie = movies[i]
        movieSimilarity = 0
        for (let j = 0; j < myratings[user.email].length; j++) {
            ratedMovie = myratings[user.email][j].movie

            // Calculate genre silmilarity
            genre1 = movie.genre
            genre2 = ratedMovie.genre
            genreSimilarityScore = jacardSimilarity(genre1, genre2)

            //calculate cast similarity
            cast1 = movie.Cast
            cast2 = ratedMovie.Cast
            castSimilarityScore = jacardSimilarity(cast1, cast2)

            //calculate director similarity
            director1 = movie.Director
            director2 = ratedMovie.Director
            directorSimilarityScore = jacardSimilarity(director1, director2)

            //weighted sum of similarity scores
            movieSimilarity += 0.2*(myratings[user.email][j].myrating - 5.5)*(2.5*directorSimilarityScore + 3*castSimilarityScore + 4.5* genreSimilarityScore)/10 //scaling it to 1
    }
    //add movie's rating to movieSimilarity
    movieSimilarity += movie.Rating[0]/20 
    // console.log(movie.Title, movieSimilarity)
    recommendedMovies.push({movie: movie, similarity: movieSimilarity})
    
}
// recommendedMovies.sort((a, b) => b.similarity - a.similarity) //sort in descending order based on similarity
// sort on the basis of similarity then on the basis of less number of movies less number of movies rated by the user`
recommendedMovies.sort((a, b) => {
    roundedA = Math.round(a.similarity * 10) / 10 // round to 1 decimal places
    roundedB = Math.round(b.similarity * 10) / 10
    if (roundedA === roundedB) {
      // console.log('here inside if rounded')
      // sum of the number of movies rated by the user in the genres of the movie
        sumA = -1
        sumB = -1
        for (let i = 0; i < a.movie.genre.length; i++) {
            if (sumA < genreCount[a.movie.genre[i].toLowerCase()]){
              // console.log('here inside if sumA')
                sumA = genreCount[a.movie.genre[i].toLowerCase()]
              }
            }
            console.log(sumA)
        for (let i = 0; i < b.movie.genre.length; i++) {
            if (sumB < genreCount[b.movie.genre[i].toLowerCase()]){
                sumB = genreCount[b.movie.genre[i].toLowerCase()]
            }
        }
        // console.log(sumA, sumB)
        if (sumA === sumB) {
            return parseFloat(b.movie.Rating[0]) - parseFloat(a.movie.Rating[0])
            console.log('here')
        }
        return sumA - sumB // sort in ascending order of sum of the number of movies rated by the user in the genres of the movie
    }
    return b.similarity - a.similarity
})
recommendedMovies = recommendedMovies.filter((movie) => {
    return !myratings[user.email].some((ratedMovie) => ratedMovie.movie.Title === movie.movie.Title) // filter out movies the user has already rated by the user
})
%>
  <div class="otherThanNav">
    <div class="container">
      <h1 class="text-center mt-3">Movies</h1>
      <div class="row">
        <div class="col-12">
          <h2 class="text-center">Recommended Movies</h2>
        </div>
      </div>
    </div>
    <div class="movie-container" style="margin: 20px;">
      <div class="row mb-3 text-center">
        <% for(let i = 0; i < 10; i++) { %>
          <% // print the imilarity score of the movie 
          console.log(recommendedMovies[i].similarity)
          %>

        <%- include('./../templates/cardForRatedRecom.ejs', {movieToAdded : recommendedMovies[i].movie, i, myratings, filename:'recommend.ejs'}) %>
        <% } %>
      </div>
    </div>
    <% } %>

</body>

</html>