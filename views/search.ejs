<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Search results for <%= searchQuery %> </title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
</head>

<body>
<%# To search movies: First split the movie title, then compare word by word to the search query. %>
<%# Shows only one movie per search %>
  <% function bigramize(title) {
        let bigrams = [];
        for (let i = 0; i < title.length - 1; i++) {
            bigrams.push(title.substring(i, i + 2));
        }
        return bigrams;
    } 
    
    function jaccard_similarity(bigrams1, bigrams2) { //standard definition of jaccard similarity
        const set1 = new Set(bigrams1);
        const set2 = new Set(bigrams2);
        const intersection = new Set([...set1].filter(x => set2.has(x)));
        const union = new Set([...set1, ...set2]);
        return intersection.size / union.size;
    }
    function correctQuery(searchQuery) {
    let searchWords = searchQuery.toLowerCase().split(' ');

    let mostSimilarWords = searchWords.map(() => ({ word: null, similarity: 0 }));

    for (let i = 0; i < movies.length; i++) {
        let titleWords = movies[i].Title.toLowerCase().replace(/[^a-z0-9\s]/gi, '').split(' ');

        for (let j = 0; j < searchWords.length; j++) {
            for (let k = 0; k < titleWords.length; k++) {
              if (titleWords[k].length <= 3) {
                    continue;
                }
                let bigramSearchWord = bigramize(searchWords[j]);
                let bigramTitleWord = bigramize(titleWords[k]);
                let wordSimilarity = jaccard_similarity(bigramSearchWord, bigramTitleWord);

                if (wordSimilarity > mostSimilarWords[j].similarity) {
                    mostSimilarWords[j] = { word: titleWords[k], similarity: wordSimilarity };
                }
            }
        }
    }

    let correctedQuery = mostSimilarWords.map(item => item.word ? item.word : searchWords[mostSimilarWords.indexOf(item)]);

    return correctedQuery.join(' ');
}

function movieContainsWord(correctedQuery) { //find movie if corrected query is in the movie title
    let movieList = [];
    // if the corrected query is inside the movie title, return that movie, even if partially in word
    for (let i = 0; i < movies.length; i++) {
    if (movies[i].Title.toLowerCase().includes(correctedQuery.toLowerCase())) {
        // add if the movie is not already in the list
        if (!movieList.includes(movies[i])) {
            movieList.push(movies[i]);
        }
    }
}
    let queryWords = correctedQuery.toLowerCase().split(' ');

    let bestMatch = null;
    let maxSimilarity = 0;

    for (let i = 0; i < movies.length; i++) {
        let titleWords = movies[i].Title.toLowerCase().replace(/[^a-z0-9\s]/gi, '').split(' ');

        let matchingWords = queryWords.filter(word => titleWords.includes(word));

        if (matchingWords.length / queryWords.length >= 0.8) {
            // add if the movie is not already in the list
            if (!movieList.includes(movies[i])) {
                movieList.push(movies[i]);
            }
        }
    }
    return movieList;
}


function findMovieJacard(correctedQuery) { //find the best match for the correctedquery using jaccard similarity

    let queryWords = correctedQuery.toLowerCase().split(' ');
    let bestMatch = null;
    let maxSimilarity = 0;

    for (let i = 0; i < movies.length; i++) {
        let titleWords = movies[i].Title.toLowerCase().replace(/[^a-z0-9\s]/gi, '').split(' ');
        let bigramQueryWords = queryWords.map(word => bigramize(word));
        let bigramTitleWords = titleWords.map(word => bigramize(word));

        let totalSimilarity = 0;
        for (let j = 0; j < bigramQueryWords.length; j++) {
            let maxWordSimilarity = 0;
            for (let k = 0; k < bigramTitleWords.length; k++) {
                let wordSimilarity = jaccard_similarity(bigramQueryWords[j], bigramTitleWords[k]);

                if (wordSimilarity > maxWordSimilarity) {
                    maxWordSimilarity = wordSimilarity;
                }
            }
            totalSimilarity += maxWordSimilarity;
        }

        let averageSimilarity = totalSimilarity / queryWords.length;

        if (averageSimilarity > maxSimilarity) {
            maxSimilarity = averageSimilarity;
            bestMatch = movies[i];
        }
    }

    return bestMatch;
}

%>
<% 
// checking
let correctedQuery = correctQuery(searchQuery);
// let movieToAdded1 = findMovieJacard(searchQuery);
// let movieToAdded2 = findMovieJacard(correctedQuery); //if the search query is not in the movie title, then search for the corrected query
movieToadded= movieContainsWord(searchQuery);
movieToAdded1 = movieContainsWord(correctedQuery);
// Take union
movieToAdded2 = movieToAdded1.concat(movieToadded.filter(item => !movieToAdded1.includes(item)));
movie3=findMovieJacard(correctedQuery);
// add movie to the list if it is not already in the list
if (!movieToAdded2.includes(movie3)) {
    movieToAdded2.push(movie3);
}

// console.log(correctedQuery);
// console.log(movieToAdded.Image['280w']);
%>
<%- include('./../templates/navbar.ejs', {loginDisplay:"block", signupDisplay:"block"}) %>
<div class="movie-container" style="margin: 20px;">
  <h2 class="text-center mt-3">Best Result for <%= searchQuery %></h2>
  <div class="row mb-3 text-center">
    <% for (let i = 0; i < movieToAdded2.length; i++) { %>
      <%- include('./../templates/cardForRatedRecom.ejs', {movieToAdded: movieToAdded2[i], i, myratings, filename: 'search.ejs'}) %> <% } %>
  </div>
</div>


<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>
</body>

</html>